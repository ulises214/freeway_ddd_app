type Cargo {
  description: String
  name: String!
}

type CargoService {
  arrivePlace: Cellphone!
  cargoTypes: [Cargo!]!
  contactNumber: String!
  departurePlace: String!
  description: String
  dueOn: String
  pictures: [String!]
  title: String!
  user: UserCarrier!
}

"""
Autogenerated input type of CargoServiceStateUpdate
"""
input CargoServiceStateUpdateInput {
  """
  Ignored
  """
  __typename: String

  """
  Cargo service UUID
  """
  cargoServiceId: ID!

  """
  State of the cargo service
  """
  state: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CargoServiceStateUpdate
"""
type CargoServiceStateUpdatePayload {
  cargoService: CargoService

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Cellphone {
  lada: String!
  number: String!
}

"""
Attributes for cellphone data type
"""
input CellphoneAttributes {
  lada: String!
  number: String!
}

"""
Autogenerated input type of CreateCargoService
"""
input CreateCargoServiceInput {
  """
  Ignored
  """
  __typename: String
  arrivePlace: String!
  cargoTypesIds: [ID!]!
  contactNumber: CellphoneAttributes
  departurePlace: String!
  description: String
  dueOn: String
  title: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCargoService
"""
type CreateCargoServicePayload {
  cargoService: CargoService

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type CurrentUser {
  buyerData: UserBuyer
  carrierData: UserCarrier
}

type Mutation {
  createCargoService(
    input: CreateCargoServiceInput!
  ): CreateCargoServicePayload
  signIn(input: SignInInput!): SignInPayload
  signUp(input: SignUpInput!): SignUpPayload
  updateCargoServiceState(
    input: CargoServiceStateUpdateInput!
  ): CargoServiceStateUpdatePayload
}

type Query {
  currentUser(token: String): CurrentUser
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  Ignored
  """
  __typename: String
  cellphone: CellphoneAttributes!

  """
  User's password
  """
  password: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
  user: User
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  """
  Ignored
  """
  __typename: String
  cellphone: CellphoneAttributes!

  """
  User's password
  """
  password: String!

  """
  User's rights
  """
  userType: String!
  adminData: UserAdminAttributes
  buyerData: UserBuyerAttributes
  carrierData: UserCarrierAttributes

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignUp
"""
type SignUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User
}

type User {
  cellphone: Cellphone!
  type: String!
  uuid: String!
}

"""
Attributes for user of type admin
"""
input UserAdminAttributes {
  role: String!
  email: String!
}

type UserBuyer {
  businessName: String!
  cellphone: Cellphone!
  email: String!
  fullName: String!
  moralPerson: String
  physicalPerson: String
  type: String!
  uuid: String!
}

"""
Attributes for user of type buyer
"""
input UserBuyerAttributes {
  businessName: String!
  fullName: String!
  email: String!
  moralPerson: String
  physicalPerson: String
}

type UserCarrier {
  address: String!
  cellphone: Cellphone!
  companyName: String!
  legalCard: String!
  moralPerson: String
  physicalPerson: String
  rating: Float
  type: String!
  uuid: String!
}

"""
Attributes for user of type carrier
"""
input UserCarrierAttributes {
  address: String!
  companyName: String!
  email: String!
  fullName: String!
  legalCard: String!
  moralPerson: String
  physicalPerson: String
}
